
1.记录每次改动
2.linus 在1991创建了开源的linux
3.C开发出的git
4.集中式：版本是集中放在中央服务器中的，需要联网
5.分布式，每个人的电脑就是一个中央服务器，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便
6.输入git看是否安装了git

7.因为git是分布式版本控制系统，所以，每个机器要区别，名字和邮件地址（git config --global user.name "Your Name" ; git config --global user.email "Your Email"）
输入git config --list 查看是否配置了用户信息和邮箱，
修改配置git config --global --replace-all user.email "输入你的邮箱" 或者 git config --global  user.name "Your name"

8.git config --global 中的文本编辑器，差异分析工具等等

9.git config的增（git config --global --add configName configValue）删（git config  --global --unset configName   (只针对存在唯一值的情况)）改（git config --global configName configValue）查（git config --global configName/--list）

10.git init 把当前目录变为git可以管理的仓库

11.git add  filename/. 告诉Git，把文件添加到仓库(Unix的哲学是“没有消息就是好消息”)，注意，可反复多次使用，添加多个文件 

12.git commit  -m <message>告诉Git，把文件提交到仓库(git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录)

13. git status  命令可以让我们时刻掌握仓库当前的状态，掌握工作区的状态

14.git diff  filename/(不输入)   查看具体修改了什么内容（工作区和版本库对比）

15.git log 查看历史记录，显示从最近到最远的提交日志，git log --pretty=oneline（输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数）
	按 q 键退出

16.gitbash中可以用clear清屏 

17. git reset --hard HEAD^  回退到上一个版本，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

18.git reset --hard 1094a（commit id）  指定回到某个版本

19.git reflog 记录你的每一次命令

20.工作区  暂存区 git当前分支（git add把文件从工作区添加到暂存区，git commit把暂存区的所有内容提交到当前分支）（因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以git commit就是往master分支上提交更改）

21.每次修改，如果不用git add到暂存区，那就不会加入到commit

22.git checkout -- filename  把文件在工作区的修改全部撤销（自修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态）

23.git checkout -- filename 命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

24.git reset HEAD <file> 可以把暂存区的修改撤销掉（unstage），重新放回工作区

25.git rm filename  删除， 然后commit 提交

26.先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的

27.删错了，可以用git reset HEAD    git checkout -- filename 撤回

28.github远程git仓库

29.第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），
				 创建SSH Key：一路回车，可不设置密码，
                 ssh-keygen -t rsa -C "youremail@example.com"，
				 可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人；
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，
				为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
				当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
				在GitHub上免费托管的Git仓库，任何人都可以看到（但只有你自己才能改）。所以，不要把敏感信息放进去。

30.在本地有一个仓库，又在github建了一个仓库，将两个关联起来，然后，把本地仓库的内容推送到GitHub仓库
	git remote add origin git@github.com:itprwe/itprwe.git  或者  git remote add origin https://github.com/itprwe/itprwe.git  --（git@github.com:itprwe（github账号名）/itprwe（github要关联的仓库名）.git）

31.添加后，远程库分支的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库分支

32.ssh-keygen -t rsa -C "youremail@example.com" 生成公共私有钥匙，将共有钥匙贴入github中

33.git push -u origin master 把当前分支master推送到远程
     由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令，
	 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改
	 
34.git remote -v  查看远程连接的方式

35.git remote rm origin 删除原先HTTPS的连接方式 ，， https的方式不会记住密码，用ssh方式

36.先有远程库，再远程克隆到本地  git clone https://github.com/itprwe/itprwe.git  或者  git clone git@github.com:itprwe/itprwe.git

37. git checkout -b dev  创建dev分支，然后切换到dev分支，命令加上-b参数表示创建并切换

38.git branch 查看当前分支，当前分支前面会标一个*号

39.git checkout master 切换到mater分支

40.git merge dev  合并指定分支（dev）到当前分支，merge分支（dev）到当前分支

41. git branch -d dev 删除dev分支

42. git branch <name> 创建分支

43.查看分支：git branch
	 创建分支：git branch <name>
	 切换分支：git checkout <name>
	 创建+切换分支：git checkout -b <name>
	 合并某分支到当前分支：git merge <name>
	 删除分支：git branch -d <name>

44.git log --graph   （git log --graph --pretty=oneline --abbrev-commit） 看到分支合并图

45.首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活
干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

45.git merge（就是 git merge -ff）和git merge --no-ff的区别：
	通常我们把 master 作为主分支，上面存放的都是比较稳定的代码，提交频率也很低，而 develop 是用来开发特性的，
	上面会存在许多零碎的提交，快进式合并会把 develop 的提交历史混入到 master 中，搅乱 master 的提交历史
	用git merge 则分支提交历史会并到master分支上面
	
46.bug修复，新建临时分支修复bug，然后合并分支，然后删除临时分支

47.git stash 当前工作现场“储藏”起来，等以后恢复现场后继续工作

48.git stash  list查看工作现场存到什么地方了

49.git stash apply恢复，恢复后stash内容并不删除，用git stash drop删除 或者 git stash pop恢复的同时把stash内容也删了

50.git branch -D <name>强行删除

51.git reset --hard  master  git将一个分支完全覆盖另外一个分支，就是将mater分支完全覆盖当前分支

52.git remote 查看远程库的信息（远程仓库名称） 或者 git remote -v显示更详细的信息（显示了可以抓取和推送的origin的地址，如果没有推送权限，则看不到push的地址）

53.推送分支，就是把该分支上的所有本地提交推送到远程库，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
	 git push origin master  ////  git push origin dev （将dev推送到对应的远程dev分支）
	 
54.并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
     master分支是主分支，因此要时刻与远程同步；
	 dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	 bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	 feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发；
	
55.git clone  本地没有 repository 时，将远程 repository 整个下载过来（从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库 --clone是将一个库复制到你的本地，是一个本地从无到有的过程）

56. git pull = git fetch + git merge  （git pull #远程主机（origin） #远程分之(next)#：#本地分之(master) ）；
	  如果远程分支是与当前分支合并，则冒号后面的部分可以省略，git pull #远程主机(origin)#　 #远程分之(next)#　相当于1. $ git fetch origin   2.$git merge origin/next ；
	  是本地有 repository 时，将远程 repository 里新的 commit 数据(如有的话)下载过来，并且与本地代码merge（从远程服务器获取到一个branch分支的更新到本地，并更新本地库 --pull是指同步一个在你本地有版本的库内容更新的部分到你的本地库）；
	  git clone 的时候，所有本地分之默认与远程主机的同名分之，建立追踪关系，也就是，本地的master分之自动“追踪”origin/master分之；
	  git 可以手动建立追踪， git branch --set-upstream master origin/next   --->指定master分之追踪到origin/next；
	  如果当前分支只有一个追踪分支，连远程主机名都可以省略。$ git pull  表示当前分之自动与唯一一个追踪分之进行合并
	  
57.git branch --set-upstream-to=origin/dev dev  把本地分支推送到远程
	 Branch 'dev' set up to track remote branch 'dev' from 'origin'.
	 
58.多人协作的工作模式
	 首先，可以试图用git push origin <branch-name>推送自己的修改；
	 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	 如果合并有冲突，则解决冲突，并在本地提交；
	 没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
	 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
	 
59.git  rebase 将git的提交历史变为干净的直线

60.在版本库中打一个标签（tag）--其实它就是指向某个commit的指针，对应某个commit号

61.git tag v1.0  默认标签是打在最新提交的commit上

62.git tag v0.9 f52c633  打在对应的commit id上

63.git show <tagname>  查看标签信息

64.git tag -a v0.1 -m "version 0.1 released" 1094adb  用-a指定标签名，-m指定说明文字

65.git tag -d v0.1 删除标签 ，因为创建的标签都只存储在本地，不会自动推送到远程，打错的标签可以在本地安全删除。如果要推送某个标签到远程，使用命令git push origin <tagname>

66. git push origin --tags 一次性推送全部尚未推送到远程的本地标签

67.如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除 git tag -d v0.9；然后，从远程删除。删除命令也是push ： git push origin :refs/tags/v0.9

68.fork别人的项目，然后clone到本地，否则没有推送权限

69. .gitignore，把要忽略的文件名填进去，Git就会自动忽略这些文件
	  忽略操作系统自动生成的文件，比如缩略图等；
	  忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	  忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件
	  
70.配置别名
	 git config --global alias.st status   告诉git  st就表示status
	 co表示checkout，ci表示commit，br表示branch
	 git config --global alias.unstage 'reset HEAD
	 git config --global alias.last 'log -1'
	 git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	 
	 可以在配置文件中直接删除掉对应的配置(git config  --global --unset configName )
	 
===================================================================

1.create
clone an existing repository
$ git clone git/http
create a new local repository
$ git init

2.local changes
changed files in your working directory
$ git status
changes to tracked files
$ git diff 
add all current changes to the next commit 
$ git add .
add some changes in <files> to the next commit
$ git add -p <file>
commit all local changes in tracked files
$ git commit -a
commit previously staged changes
$ git commit
change the last commit 
$ git commit --amend
commit with message
$ git commit -m <message>

3.commit history
show all commits, starting with newest
$ git log
show changes over time for a specific file
git log -p <file>
who changed what and when in <file>
$ git blame <file>

4.branches & tags
List all branches and last commit information
$ git branch -av
switch head branch
$ git checkout <branch>
create a new branch based on your current HEAD
$ git branch <new-branch>
create a new tracking branch based on a remote branch
$ git checkout --track <remote/branch>
delete a local branch
$ git branch -d <branch>
mark the current commit with a tag
$ git tag <tag-name>

5.update &  publish
list all currently configured remotes
$ git remote -v
show information about a remote
$ git remote show <remote>
add new remote repository ,named <remote>
$ git remote add <remote> <url>
download all changes from <remote>,but don't integrate into head
$ git fetch <remote>
download changes and directly merge/integrate into HEAD
$ git pull <remote> <branch>
publish local changes on a remote
$ git push <remote> <branch>
delete a remote branch on the remote
$ git branch -dr <remote/branch>
publish you tags
$ git push --tags

6.merge & rebase
merge<branch> into your current HEAD
$ git merge <branch>
rebase your current HEAD onto <branch>
$ gitrebase --abort
continue a rebase after resolving conflicts
$ git mergetool
use your editor to manually solve conflicts and (after resolving) mark file as resolved
$ git add <resolved-file>
$ git rm <resolved-file>

7.undo
discard all local changes in your working directory
$ git reset -- hard HEAD
discard local changes in a specific file
$ git checkout HEAD <file>
revert a commit (by producing a new commit with contrary changes)
$ git revert <commit>
reset your HEAD pointer to a previous commit and discard all changes since then
$ git reset --hard <commit>


方法一：
git remote rm origin 
git remote add origin git@github.com:Liutos/foobar.git

方法二：
git remote origin set-url <URL> 
把<URL>替换成新的url地址。

方法三：
直接修改.git/config文件

=============================================
1.已有本地仓库与远程相关联
git init
git remote add origin https://github.com/itprwe/points.git 将本地库与远程库相关联 (要添加一个新的远程仓库,可以指定一个简单的名字,以便将来引用,运行 git remote add [shortname] [url])
git push -u origin master 把当前分支master推送到远程 ，-u指定origin为默认主机

2.先有远程仓库
git clone https://github.com/itprwe/points.git  clone一个仓库
git push origin master 推送

3.建立远程分支
先建立本地分支，然后推送到远程，-u参数表示将本地的dev分支和远程的origin/dev分支之间建立跟踪关联
git checkout -b dev
git push -u origin dev / git push origin dev:dev

已有远程分支，建立本地分支并与之关联（这样使用git pull或者git push时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了）
git checkout -b <local_branch_name> origin/<remote_branch_name> 此种方法建立的分支会和远程分支建立联系
git fetch origin 远程分支名:本地分支名 此种方法建立的分支不会和远程分支建立联系  

删除远程分支
git push origin :dev
git push origin --delete dev


提交分支数据到远程服务器，远程分支就是本地分支push到服务器上
git push origin <local_branch_name>:<remote_branch_name>

git在本地新建一个分支后，需要做远程分支关联
关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支
你只要没有显示指定，git pull的时候，就会提示你
git branch --set-upstream-to=origin/remote_branch  your_branch
git branch -u origin/分支名

撤销本地分支与远程分支的映射关系
git branch --unset-upstream

查看本地分支和远程分支映射关系
git branch -vv 

=====================================================
1. git push  
推送本地分支到远程分支 git push <远程主机名> <本地分支名>：<远程分支名>

2. 如果省略远程分支名，则表示将本地分支推送至与之存在“追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
git push origin master  
将本地master分支推送到origin主机的master分支。如果后者不存在，则会被新建。

3. 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支
git push origin :master
等价于：
git push origin --delete master （删除远程分支）

4. 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略
git push origin

5. 如果当前分支只有一个追踪分支，那么主机名都可以省略
git push

git fetch
1. 将远程主机所有更新全部取回到本地
git fetch <远程主机名>

2. 将远程主机特定分支更新取回到本地
git fetch <远程主机名> <远程分支名>
注：所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。如origin主机的master，就要用origin/master读取。

(1) 可以在此origin/master的基础上创建新的分支：
git checkout -b newBranch origin/master

(2) 也可以将此origin/master分支合并到本地分支：
git merge origin/master

git pull
1. 取回远程主机某个分支的更新，再与本地指定分支合并
git pull <远程主机名> <远程分支名>：<本地分支名> 
eg: 取回origin主机的next分支与本地master分支合并  
git pull origin next：master

2. 如果远程分支是与当前分支合并，则冒号后面的部分可以省略
git pull origin next 
等价于：
git fetch origin next 
git merge origin/next

注： 在某些场合，Git会自动在本地分支与远程分支之间建立一种追踪关系（tracking）。
比如，在git clone的时候，所有本地分支默认与远程主机的同名分支建立追踪关系。也就是说，本地的master分支自动“追踪”origin/master分支。

Git也允许手动建立追踪关系：
eg：指定本地分支master追踪远程origin/next分支：
git branch --set-upstream-to origin/next master

注：查看分支追踪关系：
git branch -vv

3. 如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名
git pull origin
上面命令表示，本地的当前分支自动与对应的origin主机“追踪分支”（remote-tracking branch）进行合并。

4. 如果当前分支只有一个追踪分支，连远程主机名都可以省略
git pull

注：如果远程主机删除了某个分支，默认情况下，git pull不会在拉取远程分支的时候删除对应的本地分支。
这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。
但可以通过加参数 -p 就会在本地删除远程已经删除的分支：
git pull -p

一、git clone
从远程主机克隆一个版本库，这时就要用到git clone命令。
$ git clone <版本库的网址>
该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数
$ git clone <版本库的网址> <本地目录名>

git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。

$ git clone http[s]://example.com/path/to/repo.git/
$ git clone ssh://example.com/path/to/repo.git/
$ git clone git://example.com/path/to/repo.git/
$ git clone /opt/git/project.git 
$ git clone file:///opt/git/project.git
$ git clone ftp[s]://example.com/path/to/repo.git/
$ git clone rsync://example.com/path/to/repo.git/
SSH协议还有另一种写法。
$ git clone [user@]example.com:path/to/repo.git/
通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合

二、git remote
为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名
不带选项的时候，git remote命令列出所有远程主机
使用-v选项，可以参看远程主机的网址
$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。

克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。
$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
上面命令表示，克隆的时候，指定远程主机叫做jQuery

git remote show命令加上主机名，可以查看该主机的详细信息。
$ git remote show <主机名>

git remote add命令用于添加远程主机。
$ git remote add <主机名> <网址>

git remote rm命令用于删除远程主机。
$ git remote rm <主机名>

git remote rename命令用于远程主机的改名。
$ git remote rename <原主机名> <新主机名>


======================


remote 远程 

repository 本地仓库

stage 暂存区

workspace 工作区

=========================
git pull
1.远程分支本地没有
只有这个可以用：git pull origin dev:dev 可以将远程分支dev拉下且本地建立分支dev，但是没有建立本地远程的联系

2.远程分支本地分支有，但是没有联系（两个及以上分支）
与对应分支建立联系可用 git pull 
或者 git pull origin dev /  git pull origin dev:dev 可用，但是没有建立联系
git pull origin 只适用于有默认的分支

3.远程分支与本地分支有联系，但是比本地新或者比本地旧
未建立联系则 git pull origin dev 
建立联系后可以 git pull / git pull  origin
 
4.远程分支与本地分支相同

已有追踪关系情况下：git branch -vv
git pull 当前分支只有一个追踪分支

git pull origin 当前分支与origin的追踪分支对应，且当前分支为远程分支对应的默认分支

git pull origin dev 远程分支dev与当前分支合并

git pull origin dev:dev 远程origin的dev与本地dev合并

如果没有追踪关系，则git pull每次都会提示要建立追踪关系
（git branch --set-upstream-to=origin/dev dev）

=================================
git fetch 
获取远程最新到本地，但是文件内容不会更新，需要merge，本地主机上要用“远程主机名/分支名”的形式读取
git merge orgin/master

git fetch后
可以在此origin/master的基础上创建新的分支：
git checkout -b newBranch origin/master 与远程master建立了联系

git fetch orgin master 将远程仓库的master分支下载到本地当前branch中
git log -p master  ..origin/master //比较本地的master分支和origin/master分支的差别
git merge origin/master //进行合并

git fetch origin master:tmp //从远程仓库master分支获取最新，在本地建立tmp分支
git diff tmp //將當前分支和tmp進行對比
git merge tmp //合并tmp分支到当前分支

=========================================
git push
git push  如果当前分支只有一个追踪分支，那么主机名都可以省略

git push orign  如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略

git push origin dev 如果省略远程分支名，则表示将本地分支推送至与之存在“追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建

git push origing dev:dev 推送本地分支到远程分支

远程分支不存在 （git push origin :dev  /  git push --delete dev 删除远程分支）
git push / git push origin 不可用
git push origin dev  /  git push origing dev:dev 推送且新建了远程分支dev

远程分支存在，且相联系
git push / git push orign 当前只有一份分支追踪关系
git push origin dev / git push origing dev:dev

远程分支跟本地分支一样版本
无变化

远程分支跟本地分支版本不同
必须先pull后才能push

远程分支与本地分支不关联
git push / git push origin 无法使用需要 需要关联
git push origin dev  /  git push origing dev:dev 可以用，但是不会建立联系

建立联系
git push -u origin dev -u参数使用一次后建立联系
或者git branch --set-upstream-to=origin/dev dev


=========================

git pull <远程主机名> <远程分支名>：<本地分支名> 
git push<远程主机名> <本地分支名>：<远程分支名> 
两个的不同要注意

===================================
git clone <版本库的网址>
git clone <版本库的网址> <本地目录名>
git clone -o <远程主机名> <版本库的网址>
clone下来的仓库默认分支（master）与本地分支master有追踪关系，其他远程分支不被建立到本地

=================================

git remote -v
git remote show <主机名>
git remote add <主机名> <网址> 本地仓库与远程仓库建立联系
git remote rm <主机名> 删除远程主机
git remote rename <原主机名> <新主机名>









