0.设置简化命令
进入.git文件中的config文件，加入
[alias]
    co = checkout
    ci = commit
    br = branch
    st = status
    last = log -1
或者设置配置： git config --global alias.st status
删除配置为：git config  --global --unset alias.st


1.工作区 暂存区 当前分支 远程分支

2.初始
git init 把当前目录变为可管理的仓库
git add ./filename 把文件添加到暂存区
git commit -m "message" 把文件提交到当前分支
git commit -m ' 换行注释'
git commit --amend 编辑上次的commit提交备注
git commit -a 提交所有暂存区文件
git status 掌握仓库工作区的状态

3.日志
git diff filename/不输入 工作区与暂存区对比
git diff –staged 暂存区与版本库对比
git diff [first branch] [second branch] 两个分支对比
git log 查看历史记录
git log --pretty=oneline（输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数）
	按 q 键退出
4.git reflog 记录你的每一次命令

5.clear 清屏

6.回退
git reset --hard HEAD^ 回退到上一个版本
git reset --hard 1094a(commitid) 丢弃所有的历史记录，并回滚到指定的提交版本
git reset [file] 从stage中撤出指定的文件，但可以保留文件的内容
git reset [commit] 撤销指定提交之后的所有提交，并在本地保留变更
git checkout -- filename 把文件在工作区的修改撤销
git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区

7.删除
git rm filename 删除当前分支（版本库）的文件，然后commit提交(操作暂存区)
先手动删除文件（操作工作区），然后使用git add <file>和git rm<file>效果是一样的
删错了，可以用git reset HEAD    git checkout -- filename 撤回

8.github 远程
用户目录下.ssh文件中是否有id_rsa和id_rsa.pub
没有则创建一下，将id_rsa.pub中的内容放到github SSHKey中
GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了

9.关联
本地有个仓库，github也有个仓库，将两个关联起来，将本地仓库内容推到github仓库中
git remote add origin git@github.com:itprwe/itprwe.git  或者  
git remote add origin https://github.com/itprwe/itprwe.git  
--（git@github.com:itprwe（github账号名）/itprwe（github要关联的仓库名）.git）

添加后，远程库分支的名字就是origin
git push -u origin master 把当前分支master推送到远程
（由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令，此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改）

git remote rm origin 删除原先HTTPS的连接方式 ，， https的方式不会记住密码，用ssh方式

先有远程库，再远程克隆到本地  git clone https://github.com/itprwe/itprwe.git  或者  git clone git@github.com:itprwe/itprwe.git

10.分支
git branch 查看本地分支
git branch -r 查看远程分支
git branch -a/git branch --list 查看所有分支
git branch -v 查看每一个分支的最后一次提交
git branch --all | grep "abc" (根据"abc"进行分支检索)
git branch <name>新建分支<name>
git branch -d <name>删除分支<name>
git fetch origin  (git branch -r 无法获取远程分支，ui可以看见分支但是git 命令无法查看
原因 git branch -a 这条命令并没有每一次都从远程更新仓库信息，我们可以手动git fetch origin 更新一下)
git branch --set-upstream master origin/next 指定master分支追踪origin/next分支

git checkout [branch name] 切换分支
git checkout -b [branch name]创建一个分支，并切换到新分支上
git checkout -b myRelease origin/Release切换远程分支（作用是checkout远程的Release分支，在本地起名为myRelease分支，并切换到本地的myRelase分支）

11.git merge
git merge [branch name]将指定分支[branch name]的历史记录合并到当前分支
当前分支上git 自动会产生一个新的commit(merge commit)
简单分支merge:
合并 bugfix分支到master分支时，如果master分支的状态没有被更改过，那么这个合并是非常简单的。 bugfix分支的历史记录包含master分支所有的历史记录，所以通过把master分支的位置移动到bugfix的最新分支上，Git 就会合并。这样的合并被称为fast-forward（快进）合并
多人merge分支:
master分支的历史记录有可能在bugfix分支分叉出去后被人有新的更新。这种情况下，要把master分支的修改内容和bugfix分支的修改内容汇合起来。因此，合并两个修改会生成一个提交。这时，master分支的HEAD会移动到该提交上。

git rebase 将commit历史进行合并
优点：项目历史比较简单，少了merge commit
缺点：当发生冲突时不容易定位问题，因为re-write了history
合并时如果出现冲突需要按照如下步骤解决
修改冲突部分
git add
git rebase --continue
（如果第三步无效可以执行 git rebase --skip）
不要在git add 之后习惯性的执行 git commit命令

The Golden Rule of Rebasing rebase  的黄金法则
never use it on public branches(不要在公共分支上使用)

11.分支关联
git remote -v
git remote show <主机名>
git remote add <主机名> <网址> 本地仓库与远程仓库建立联系
git remote rm <主机名> 删除远程主机
git remote rename <原主机名> <新主机名>
git push origin <local_branch_name>:<remote_branch_name>

12.git push 将本地版本库的分支推送到远程服务器上对应的分支
git push origin <local_name> <remote_name> / git push origin <local_name>:<remote_name>
git push origin <local_name>
git push origin :<remote_name> / git push origin --delete <remote_name>
git push origin 
git push
git push -u origin master


13. git pull = git fetch + git merge
git pull origin <remote_name>:<local_name>
git pull origin <remote_name>
git pull

14. git fetch 相当于是从远程获取最新版本到本地，不会自动合并
将远程主机所有更新全部取回到本地
git fetch <远程主机名>

将远程主机特定分支更新取回到本地
git fetch <远程主机名> <远程分支名>
注：所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。如origin主机的master，就要用origin/master读取
git fetch 
获取远程最新到本地，但是文件内容不会更新，需要merge，本地主机上要用“远程主机名/分支名”的形式读取
git merge orgin/master

git fetch后
可以在此origin/master的基础上创建新的分支：
git checkout -b newBranch origin/master 与远程master建立了联系

git fetch orgin master 将远程仓库的master分支下载到本地当前branch中
git log -p master  ..origin/master //比较本地的master分支和origin/master分支的差别
git merge origin/master //进行合并

git fetch origin master:tmp //从远程仓库master分支获取最新，在本地建立tmp分支//
git diff tmp //將當前分支和tmp進行對比
git merge tmp //合并tmp分支到当前分支

12.git stash 当前工作现场“储藏”起来，等以后恢复现场后继续工作

13.git clone  先有远程库，再远程克隆到本地 
git clone https://github.com/itprwe/itprwe.git  或者  git clone git@github.com:itprwe/itprwe.git
本地没有 repository 时，将远程 repository 整个下载过来（从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库 --clone是将一个库复制到你的本地，是一个本地从无到有的过程）
所有本地分之默认与远程主机的同名分之，建立追踪关系，也就是，本地的master分之自动“追踪”origin/master分之
git clone <版本库的网址>
git clone <版本库的网址> <本地目录名>
git clone -o <远程主机名> <版本库的网址>
clone下来的仓库默认分支（master）与本地分支master有追踪关系，其他远程分支不被建立到本地

14.idea中git使用
1) settings->Version Control->Git->Path to Git executable: 设置为安装git中所安装的git.exe
2) 设置github账号 settings->Version Control->GitHub->Add account
a. 用IDEA从github上pull一个现成的项目到本地，并使用
checkout ：菜单->VCS->Chekout from Version Control->Github（或者Git）
b. IDEA 创建的本地项目push到GitHub上
首先在github创建一个仓库，创建成功，得到git地址
本地创建一个项目，创建本地仓库，菜单->VCS->import into Version Control->Create Git Repository->e:\project\hiworld-OK
把项目加入到本地仓库的stage区暂存
右键项目->Git->Add
将暂存的项目提交到本地仓库然后提交到远程仓库(IDEA里将这两步骤简化为一步 即Commit and Push)
右键项目->Git->Commit Directory之后弹出如图所示的窗口，在Commit Message 输入 test， 然后点击 Commit And Push
这里会询问你要提交的哪里去，点击Define remote,并输入在" 创建成功，得到git地址 "步骤中的：
c. IDEA里代码提交和项目更新
使用快捷键CTRL+K,就会弹出提交的界面，点击Commit and Push即可
点击快捷键Ctrl+T，就会弹出更新的界面，点击OK即可


==========================================================================================
五类主要分支:
master主分支
release分支
develop分支
feature分支
hotfix分支

 Git push
在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。

    git push的一般形式为 git push <远程主机名> <本地分支名>  <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，

    第一个master是本地分支名，第二个master是远程分支名。

    1.1 git push origin master

        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建

     1.2 git push origin ：refs/for/master 

　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master

    1.3 git push origin

　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 

　1.4 git push

　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名

　1.5 git push 的其他命令

　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：

　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，

　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式

　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置

　　　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项

　　　　（3） git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。

　　　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令

　1.6 关于 refs/for

　　// refs/for 的意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的，而refs/heads 不需要